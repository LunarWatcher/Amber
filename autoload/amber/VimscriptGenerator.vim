vim9script

def amber#VimscriptGenerator#comment(line: string): string
    return '" ' .. line 
enddef

def amber#VimscriptGenerator#variable(name: string, value: string): string
    var fragment = 's:' .. name .. " = '" .. value .. "'"
    return 'let ' .. fragment
enddef


def amber#VimscriptGenerator#assembleGroup(groupContent: list<string>, vim9: number = 0): list<any>
    var needsExec = 0
    var construct = ""
    for data in groupContent
        if stridx(data, '=') != -1
            construct = construct .. " " ..  data
        else
            needsExec = 1
            construct = construct .. '" ' .. repeat('.', 1 + vim9) ..
                ' ' .. data .. ' ' .. repeat('.', 1 + vim9) .. ' " '
        endif
    endfor
    
    return [ needsExec, construct ]
enddef

def amber#VimscriptGenerator#generateVimscript(filename: string)
    var lines: list<string> = []

    add(lines, amber#VimscriptGenerator#comment('Theme name: ' .. filename))

    for [k, v] in items(g:AmberMeta)
        add(lines, amber#VimscriptGenerator#comment(k .. ': ' .. v))
    endfor
    add(lines, '')
    add(lines, amber#VimscriptGenerator#comment('Theme code generated by Amber: https://github.com/lunarwatcher/amber'))

    var comments = {}
    var fileLines = getline(0, '$')
    var counter: number = 0

    for line in fileLines
        if line =~ "^#"
            add(lines, amber#VimscriptGenerator#comment(trim(line[1 : ])))
            continue
        endif

        g:AmberVariables = {}
        g:AmberHighlights = {}
        g:AmberRawCode = []
        amber#Compile(line, 1)

        for [variableName, value] in items(g:AmberVariables)
            add(lines, amber#VimscriptGenerator#variable(variableName, value)) 
        endfor

        for [groupName, groupContent] in items(g:AmberHighlights)
            if type(groupContent) == v:t_string
                add(lines, 'hi ' .. groupName .. ' ' .. groupContent)
            else
                var raw = amber#VimscriptGenerator#assembleGroup(groupContent)
                var needsExec = raw[0]
                var construct = raw[1]
                if !needsExec
                    add(lines, 'hi ' .. groupName .. ' ' .. construct)
                else
                    add(lines, 'exec "hi ' .. groupName .. ' ' .. substitute(trim(construct), "'", "''", 'g') .. '"')
                endif
            endif

        endfor
        for code in g:AmberRawCode
            extend(lines, code)
        endfor
    endfor
    
    writefile(lines, g:AmberOutputDirectory .. '/' .. filename .. ".vim")

enddef
