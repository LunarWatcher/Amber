*amber* *amber.vim* *amber.txt*

License: MIT
URL: https://github.com/LunarWatcher/Amber

Changelog:

================================================================================
Table of contents~

    1. Introduction .................................. |amber-introduction|
    2. Usage ......................................... |amber-usage|
    3. Syntax ........................................ |amber-syntax|
    4. Options ....................................... |amber-options|
    5. License ....................................... |amber-license|

================================================================================
1. Introduction                                               *amber-introduction*

The primary motivation behind this plugin is making it substantially easier to
prototype and generate colorschemes, without leaving Vim.

The main functionality in Amber is the preview feature - plug in your color
values, and see what it looks like. As a side-effect, Amber also generates a
.vim file that you can use and distribute as a colorscheme - even if you decide
to uninstall Amber later.

Caveats~

* There's currently no way to "undo" what Amber has done. Restart Vim to restore
  its former glory.


--------------------------------------------------------------------------------
                                                                 *amber-technical*

This bit of the document makes no practical difference for the average user of
Amber, but still exists for the people more interested in the internals of
Amber. Jump to |amber-usage| if you don't care, or just don't wanna read this
bit right now.

Amber is largely just a parser and command executor. There's autocmds on
CursorHold for checking for somewhat natural points to update amber.
There's lots of different autocmds that could've been applied, but I chose
CursorHold (and CursorHoldI) because it makes more sense to update when the
cursor is held rather than when it's been moved.

This is largely a performance decision - we want real-time updates, but not so
real-time it affects performance.

Also, note that due to how syntax highlights are cleared, custom groups will be
undefined. Their matches aren't removed, however, so while they aren't rendered,
they still exist. 

================================================================================
2. Usage                                                             *amber-usage*

Usage is fairly straight-forward: you run |:AmberInit|, and start writing your
theme. Syngroups are kept up to date with your theme definition.

See |amber-commands| for a list of commands, and |amber-syntax| for extended
syntax information.

--------------------------------------------------------------------------------
2.0. Getting started                                            |amber-quickstart|

As already mentioned, run |:AmberInit|. This works best on a "clean" session.
Before continuing, I recommend using one of |:AmberOutput| or |:AmberOutputHere|
to correctly set the output folder. If your current working directory is your
theme repo, using |:AmberOutputHere| is recommended. This is necessary to get
|:AmberSave| to output into the right directory. If you're loading a theme,
running one of these commands prior to running |:AmberLoad| is required. Also
note that you don't need to init before loading.

Writing themes~

When you've run |:AmberInit|, you're ready to write your theme. Amber
automatically clears any existing colors, and updates Vim automatically with
changes you make so Vim reflects the current state of your colorscheme.

Note that due to how some plugins work, airline and other plugins don't get
cleared in the same way. This is unfixable.

Each line in the Amber buffer is either a highlight, a comment, or a variable.
Vimscript blocks have some limited support, but these won't be covered.

It's typical to start with a background color: >
    Normal { guifg=#000 guibg=#fff }
<

This is also the general syntax for a highlight definition. There's the name of
a highlight group (|:hi-normal|), some brackets that're purely for parsing, and
the content of said brackets is identical to what's passed to a regular `hi`
command. Remember, a Vim theme is just a series of |:highlight|s with color
information. What goes in the group depends on what you're trying to do. The
line above works if you have a truecolor terminal, or you're using a GUI version
of Vim. See: |'termguicolors'|

If you're making a theme for both GUI and 8 bit colors, you can of course use
both: >
    Normal { guifg=#000000 guibg=#ffffff ctermbg=white ctermfg=black }
<

The values can be whatever is supported by the parameter. For a complete list of
features supported by vim, see |highlight-cterm|, |highlight-term|, and
|highlight-gui|

From here, it's a matter of finding the appropriate highlight groups.

Going deeper: coloring the right things~

Unless you have a reference theme, or you're really experienced with Vim themes,
there's a good chance you have no clue which highlight groups you're looking
for. 

Aside a search engine being your best friend, you can use |:AmberSynstack| to
get highlight groups under the cursor. To see more information about a group,
run `:hi GroupNameHere`. For groups that just show "links to someOtherGroup",
you can run `:hi someOtherGroup`, effectively manually following the link. This
is particularly useful for finding base highlights.

For an instance, some languages may have a highlight group called
someLanguageComment, which is just a link to Comment. A command to automatically
display links is planned for later.

Using variables~

Variables were added fairly early on, and they're primarily useful when you
repeat colors. Syntactically, they're defined like this: >
    var SomeVariable = "variable content"
<

For an instance: >
    var PrimaryPink = "#F24AB2"
<

The type is irrelevant, so every variable looks like a string. If you're passing
a raw number, you still surround it with quotes. It's all concatenated without
the quotes to the resulting highlight instruction

Dereferencing variables is done with `%`: >
    iCursor { guibg=%PrimaryPink }
<

When the Vimscript file is generated, the variables are preserved.

Using links~

Linking in Vim themes is pretty straight-forward as a concept: it means that a
given syntax group "inherits" another.

These are used with a special link flag in the highlight definition: >
    WintabsInactiveSepEmptyNC { link=WintabsActiveSepEmpty }
<

The part after the `=` is which group to link to. See: |:hi-link| for more info
on linking in general

Saving and exporting~

When you save, a Vimscript file is generated with the theme definition. A
`.amber` file is also saved, so you can continue editing later. |:AmberSave|
writes the .amber and .vim files to |g:AmberOutputDirectory|, which you again
can set with one of |:AmberOutput| or |:AmberOutputHere|. Setting it before
saving is necessary if you want it to output to somewhere that isn't
`~/.amber-vim/`.

Two different files are saved because raw Vimscript is a pain to execute
repeatedly, without spewing out a errors. This is also why Amber
(unfortunately) had to use different syntax. (read: I don't want to parse
vimscript in vim).

When you've saved, you'll have a usable and sharable `.vim`-file. If you add the
output folder as a Vim plugin, you can even test it out as a proper colorscheme.

---

In theory, Amber could be extended with additional generators for completely
different editors by transforming the highlight group names and other commands
into something usable by some other editor.
That said, I won't be implementing this because I don't use any other editors
where the colorscheme is a topic. 

--------------------------------------------------------------------------------
2.1. Commands                                                     *amber-commands*

*:AmberInit*               Initializes Amber's buffer. Also clears syntax
                         highlighting.
*:AmberSynstack*           Lists all syntax highlighting groups under the cursor
*:AmberInsertGroups*       Inserts groups under the cursor into Amber's buffer.
                         Prevents duplicates
*:AmberSave* [theme name]  Where to save the theme. If the theme name is 0, the
                         name is attempted sourced from |g:AmberCurrentTheme|.
                         If |g:AmberCurrentTheme| is 0, you'll be prompted for a
                         theme name.
*:AmberLoad* [theme name]  Load a theme. If no theme name is supplied, the
                         command prompts you for a name.
                         Running |:AmberInit| before using |:AmberLoad| is not
                         required.
*:AmberOutputHere*         Sets |g:AmberOutputDirectory| to getcwd() .. "/colors"
*:AmberOutput* [output path]  Command wrapper around |g:AmberOutputDirectory|

================================================================================
3. Syntax                                                           *amber-syntax*

As mentioned in the README, Amber has a custom, but tiny markup language. Its
syntax is meant to be simple.

 1. A line is a statement. For implementation reasons, there are no multiline
    statements -- I get enough of that from working on autopairs
 2. A line is either a variable or a (highlight) statement. Declaration order
    may be of significance
    (multiple lines changing may cause some lines to be processed
    before variables are initialized or updated)
 3. A variable line is `var VariableName = "Your string content here"`
    For various implementation reasons (read: because of the use of these
    variables), there aren't other variable types because they shouldn't be
    needed. The way highlights and stuff are interpreted should make them
    redundant. Also, note that due to the way strings in vim and how Amber's
    substitution is set up, you always get the raw content of the variable. Use
    this wisely when interpolating.
 4. A statement contains a highlight group name and brackets containing
    additional data. I.e. `HighlightGroup { guifg=#abcdef guigb=#fedcba }`

    These are mostly compatible with the highlight command,
    with the exception that `link` is a valid keyword, and performs a
    `Highlight link groupName`
 5. Vimscript blocks:
    Starts with a line just being `begin vim`, and ends with `end vim` -- note
    that it's not compatible with vim9script because `source` doesn't expose
    functions. Will revisit this in the future. ANYTHING between these lines
    will be interpreted as Vimscript and sourced in.

There's no way to define new syntax groups; these go in `syntax/`, and follows
an entirely different convention. If you absolutely want to add highlight group
definitions, consider making a plugin and using Amber when the groups are in
place.

Also, note that because vim doesn't give two fucks about whether a group exists
or not, Amber does no validation on your groups. As a side-effect, this means
you can design for groups you don't have, but you can for obvious reasons not
render it.

When Amber eventually supports various other non-standard highlights (i.e.
airline, potentially lightline, etc.), there might be a 6th point to
differentiate between these.

================================================================================
                                                                   *amber-options*

--------------------------------------------------------------------------------
                                                          *g:AmberClearHighlights*

Default: 1

Whether or not to clear highlight groups when starting Amber.

Note that for certain things (such as airline), the highlight groups may be
reset when the bar is updated. This isn't something Amber can help - if you have
a regenerative thing hooked up, Amber won't be able to clear highlights
properly.

However, Amber does clear the highlights every time something has changed, which
does have a certain effect on Airline.

--------------------------------------------------------------------------------
                                                          *g:AmberOutputDirectory*

Default: $HOME . '/.amber-vim'

Defines where to output theme files. Note that these aren't output in a place
where you can use it directly. You'll need to put it in the appropriate
directory.

This is largely done to make the output completely portable - throw it in where
it makes sense.

As a suggestion, you can create a colorscheme plugin, and set the output to the
`colors` folder in said plugin.

--------------------------------------------------------------------------------
                                                             *g:AmberCurrentTheme*

Type: String or the integer 0

This variable contains the current theme if |:AmberSave| or |:AmberLoad| has
been called in the current session. This is primarily intended as a cache
variable so you don't have to retype the name if you save several times in a
single editing session.


--------------------------------------------------------------------------------



*amber-end-of-options* (this is a utility tag for document editing and doesn't
                        represent anything of importance)
================================================================================
5. License                                                         *amber-license*

Amber~
Amber is licensed under the MIT license, as per
https://github.com/LunarWatcher/Amber/blob/master/LICENSE

Generated themes~
The themes generated aren't under the MIT license, and you're free to license
and distribute these however you see fit. I do not intend on taking ownership of
whatever themes you create.

Note, however, that the as-is clause of the MIT license
applies to the code generated by Amber: >
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
<
How you use it and license it from there is your business, not mine. Largely
because you could easily make colorschemes without a plugin :)

Amber does insert a few bits of meta information at the start of the theme.
While it's not strictly required to include this information in redistributions,
it's appreciated if you leave the "Generated by" note in. It's added as a part
of the vimscript template, and you can remove it if you want, but nonetheless
appreciated.


vim:ft=help:tw=80
